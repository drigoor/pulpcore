<?xml version="1.0"?>

<project name="PulpCore 0.11" default="build" basedir=".">

    <property file="version.number" />
    <property file="build.properties" />
    
    <property name="platform" value="applet" />
    
    <property name="project.debug.jar.file" value="pulpcore-${platform}-debug-${version}.jar" />
    <property name="project.release.jar.file" value="pulpcore-${platform}-release-${version}.jar" />
    <property name="assettools.jar.file" value="pulpcore-assettools-${version}.jar" />
    <property name="player.jar.file" value="pulpcore-player-${version}.jar" />
    <property name="ant.jar" value="${ant.home}/lib/ant.jar" />

    <property name="src" value="src" />
    <property name="res" value="res" />
    <property name="lib" value="lib/${platform}" />
    <property name="build" value="build" />
    <property name="build.temp" value="${build}/temp" />
    <property name="tools.src" value="tools" />

    <!-- Footer for the JavaDoc HTML files. Google Analytics code can go here. -->
    <property name="javadoc.footer" value="" />
    <property name="javadoc.destdir" value="doc/api" />
    
    <property name="compilerargs" value="-Xlint:all,-serial" />
    
    <target name="clean">
        <delete dir="${build.temp}" failonerror="false" />
    </target>
    
    <target name="-check-dependencies">
        <condition property="do.jslint">
            <available file="${rhino.path}" />
        </condition>
        
        <fail message="Required file not found: ${ant.jar}">
            <condition><not><available file="${ant.jar}" /></not></condition>
        </fail>

        <fail message="Required file not found: ${library.path}">
            <condition><not><available file="${library.path}" /></not></condition>
        </fail>

    </target>
    
    
    <target name="-init" depends="-check-dependencies, clean">

        <mkdir dir="${build}" />
        <mkdir dir="${build.temp}" />
        <mkdir dir="${build.temp}/assets" />
        <mkdir dir="${build.temp}/player" />
        <mkdir dir="${build.temp}/assettools" />
    
        <condition property="src.tiger" value="pulpcore/platform/${platform}">
            <not><equals arg1="${platform}" arg2="applet"/></not>
        </condition>
        
        <condition property="src.includes" value="pulpcore/*/*.java, pulpcore/animation/event/*.java, pulpcore/util/crypt/*.java, pulpcore/image/filter/*.java">
            <not><equals arg1="${platform}" arg2="applet"/></not>
        </condition>
        
        <condition property="src.tiger" value="pulpcore/platform/applet/opt">
            <equals arg1="${platform}" arg2="applet"/>
        </condition>
        
        <condition property="src.includes" value="pulpcore/*/*.java, pulpcore/animation/event/*.java, pulpcore/util/crypt/*.java, pulpcore/image/filter/*.java, pulpcore/platform/applet/*.java">
            <equals arg1="${platform}" arg2="applet"/>
        </condition>
    
        <!-- Generate Build.java file -->
        <echo file="${src}/pulpcore/Build.java"><![CDATA[
        // Automatically generated file. Do not edit.
        
        package pulpcore;
        
        /**
            The Build class provides information on this build of PulpCore.
            This class is automatically generated by the Ant build file.
        */
        public interface Build {
        
            /** The version number of this PulpCore build. */
            public static final String VERSION = "${version.full}";
            
            /** The build date. */
            public static final String BUILD_DATE = "${build.date}";
            
            /** The platform name of this PulpCore build. */
            public static final String PLATFORM = "${platform}";
            
            /** 
                The debug flag of this PulpCore build. If DEBUG is true:
                <ul>
                <li>Press ctrl-C to view the console. The console also appears when 
                there is an uncaught exception.</li>
                <li>Press ctrl-I to view frame rate and memory information.</li>
                <li>Press ctrl-D to view dirty rectangles (Scene2D only).</li>
                </ul>
            */
            public static final boolean DEBUG = ${debug};
            
        }
        
        ]]></echo>
        
    </target>
    
    
    <target name="compile-core" depends="-init">

        <!-- Compile Tiger platform (J2SE 1.5) code -->
        <javac srcdir="${src}"
                destdir="${build}/temp"
                extdirs="${lib}"
                source="1.4"
                target="1.4"
                debug="on"
                deprecation="on">

            <include name="${src.tiger}/**/*.java" />
            <compilerarg line="${compilerargs}" />
        </javac>
        
        <mkdir dir="${build}/temp2" />
        
        <!-- Compile Java 1.4 code -->
        <javac srcdir="${src}"
                destdir="${build}/temp2"
                extdirs="${lib}"
                classpath="${build}/temp"
                source="1.4"
                target="1.4"
                debug="on"
                deprecation="on"
                includes="${src.includes}"
                bootclasspath="${library.path}">
                
            <compilerarg line="${compilerargs}" />
        </javac>
        
        <copy todir="${build}/temp">
            <fileset dir="${build}/temp2" includes="**/*.class"/>
        </copy>
        
        <delete failonerror="false" dir="${build}/temp2" />
        
    </target>
    
    
    <target name="jar-core" depends="compile-core">
        <taskdef resource="tasks.properties" classpath="${build}/${assettools.jar.file}" /> 
        <pulpcore-assets srcDir="${res}/jar" destDir="${build.temp}/assets" /> 
        
        <jar destfile="${build}/${core.jar.file}" level="9">
            <fileset dir="${build.temp}" includes="**/*.class" />
            <fileset dir="${build.temp}/assets" includes="**/*" />
        </jar>
        
        <!-- clean up-->
        <delete dir="${build.temp}" />
    </target>
    
    
    <!-- 
        Use Douglas Crockford's JavaScript checker
        See http://jslint.com/
    -->
    <target name="jslint" if="do.jslint" depends="-check-dependencies" description="Run JSLint">
        <java classname="org.mozilla.javascript.tools.shell.Main">
            <classpath>
                <pathelement location="${rhino.path}"/>
            </classpath>
            <arg file="lib/jslint.js"/>
            <arg file="${tools.src}/assettools/pulpcore.js"/>
        </java>
    </target>
    
   
    <target name="compile-tools" depends="jslint">
    
        <antcall target="-init" >
            <param name="debug" value="true"/>
        </antcall>
        
        <!-- Asset tools -->
        <javac  destdir="${build.temp}/assettools"
                source="1.5"
                target="1.5"
                debug="on"
                deprecation="off"
                classpath="${ant.jar};${salamander.path}">
                
                <src path="${src}"/>
                <src path="${tools.src}/assettools"/>
                
                <include name="**/*.java" />
                <exclude name="pulpcore/**/*.java" />
                
                <compilerarg line="${compilerargs}" />
        </javac>
        
        <!-- Player -->
        <javac  destdir="${build.temp}/player"
                source="1.5"
                target="1.5"
                debug="on"
                deprecation="off"
                classpath="${ant.jar}">
                
                <src path="${src}"/>
                <src path="${tools.src}/player"/>
                
                <include name="**/*.java" />
                <exclude name="pulpcore/**/*.java" />
                
                <compilerarg line="${compilerargs}" />
        </javac>
    </target>
    
    
    <target name="build-tools" depends="compile-tools" description="Build the tools">
        <delete file="${build}/${assettools.jar.file}" failonerror="no" />
        <jar destfile="${build}/${assettools.jar.file}">
            <fileset dir="${build.temp}/assettools" includes="**/*.class"/>
            <fileset dir="${tools.src}/assettools" excludes="**/*.java"/>
            <zipfileset src="${salamander.path}" includes="**/*.class"/>
        </jar>
        
        <delete file="${build}/${player.jar.file}" failonerror="no" />
        <jar destfile="${build}/${player.jar.file}">
            <fileset dir="${build.temp}/player" includes="**/*.class"/>
            <fileset dir="${tools.src}/player" excludes="**/*.java"/>
            <manifest>
                <attribute name="Main-Class" value="pulpcore.player.PulpCorePlayer"/>
            </manifest>
        </jar>
        
        <!-- Copy Retroweaver, pack200 jar -->
        <copy file="${retroweaver.path}" tofile="${build}/retroweaver-all.jar"/>
        <copy file="${pack200.ant.path}" tofile="${build}/Pack200Task.jar"/>

        <!-- Clean up-->
        <delete dir="${build.temp}" />
    </target>
    
    
    <target name="build-core" description="Build">
    
        <tstamp>
            <format property="build.date" pattern="yyyy/MM/dd HH:mm:ss" />
        </tstamp>
        
        <antcall target="jar-core" >
            <param name="debug" value="true"/>
            <param name="core.jar.file" value="${project.debug.jar.file}" />
        </antcall>
        
        <antcall target="jar-core" >
            <param name="debug" value="false"/>
            <param name="core.jar.file" value="${project.release.jar.file}" />
        </antcall>

    </target>
    
    
    <target name="build" depends="build-tools, build-core" description="Build tools and the core" />
    
    
    <target name="javadoc" description="Generate API documentation">
    
        <delete dir="${javadoc.destdir}" failonerror="false"/>
        <mkdir dir="${javadoc.destdir}" />
        
        <javadoc
            destdir="${javadoc.destdir}"
            author="true"
            version="true"
            use="true"
            linksource="false"
            windowtitle="PulpCore ${version.full} API"
            access="protected"
            extdirs="lib/lwjgl">
        
            <packageset dir="${src}" defaultexcludes="yes">
                <!-- Hide implementation details -->
                <exclude name="pulpcore/platform/**" />
            </packageset>
            
            <doctitle><![CDATA[<h1>PulpCore ${version.full}</h1>]]></doctitle>
            <header><![CDATA[<a href="http://www.interactivepulp.com/pulpcore/" target="_top">PulpCore</a>]]></header>
            <bottom>Copyright &amp;copy; 2007-2009 Interactive Pulp, LLC.${javadoc.footer}</bottom>
            <!-- 
            <group title="PulpCore" packages="pulpcore*"/>
            <group title="PulpCore platform implementations" packages="pulpcore.platform*"/>
            -->
            <link href="http://java.sun.com/javase/6/docs/api/"/>
        </javadoc>
    </target>
    
    
    <target name="findbugs" description="Run FindBugs bug checker" depends="build">
        <taskdef name="findbugs" 
            classname="edu.umd.cs.findbugs.anttask.FindBugsTask" 
            classpath="${findbugs.path}/lib/findbugs-ant.jar"/>
            
        <findbugs home="${findbugs.path}" output="emacs" jvmargs="-Xmx512m">
            <auxClasspath path="${library.path}" />
            <sourcePath path="${src}" />
            <class location="${build}/${project.debug.jar.file}" />
        </findbugs>
    </target>
    
    
    <target name="jcsc" description="Run JCSC code checker" depends="build">
  
        <taskdef name="jcsc" classname="rj.tools.jcsc.ant.JCSCTask"
            classpath="${jcsc.path}/lib/JCSC.jar"/>
        
        <delete dir="doc/dev/jcsc" failonerror="false"/>
        <mkdir dir="doc/dev/jcsc"/>
        
        <jcsc jcschome="${jcsc.path}"
            destdir="${basedir}/doc/dev/jcsc"
            rules="${basedir}/pulpcore-forgiving.jcsc.xml"
            copyassociatedfiles="true"
            worstcount="1000"
            >
                
            <fileset dir="${src}" includes="**/*.java"/>
        </jcsc>
    </target>
    
    
    <target name="test" description="Runs JUnit tests">
        <javac srcdir="tests/src"
                destdir="tests"
                classpath="${build}/${project.debug.jar.file}:${junit.path}"
                debug="on"
                deprecation="on">
            <include name="*.java" />
        </javac>
        
        <java classname="org.junit.runner.JUnitCore" fork="true" dir="${basedir}/tests">
            <arg value="AnimationTest"/>
            <!--<arg value="CoreMathTest"/>-->
            <arg value="PNGTest"/>
            <arg value="GraphicsTest"/>
            <classpath>
                <pathelement path="${basedir}/tests;${build}/${project.debug.jar.file};${build}/${assettools.jar.file};${junit.path}"/>
            </classpath>
        </java>
        
        <delete dir="tests" includes="*.class" />
    </target>
    
    
    <target name="dist" description="Creates the PulpCore binary distribution" 
        depends="build, javadoc">
        
        <mkdir dir="${build}" />
        <delete>
            <fileset dir="${build}" includes="pulpcore-*.zip"/>
        </delete>
        
        <delete dir="${build}/www"/>
        <mkdir dir="${build}/www" />
        
        <property name="dist.temp" value="${build}/dist.temp" />
        <delete dir="${dist.temp}" failonerror="false" />
	
        <fail message="Please delete: ${dist.temp}">
            <condition><available file="${dist.temp}" /></condition>
        </fail>
	
        <mkdir dir="${dist.temp}" />
        <mkdir dir="${dist.temp}/templates" />
        <mkdir dir="${dist.temp}/examples" />
        <mkdir dir="${dist.temp}/build" />
        <mkdir dir="${dist.temp}/doc" />
        <mkdir dir="${dist.temp}/contrib" />
        
        <copy todir="${dist.temp}/templates">
            <fileset dir="templates">
                <exclude name="*/build/**/*" />
                <exclude name="build.number" />
                <exclude name="scala/build.properties" />
            </fileset>
        </copy>
        
        <copy todir="${dist.temp}/examples">
            <fileset dir="examples">
                <exclude name="*/build" />
                <exclude name="*/build/**/*" />
            </fileset>
        </copy>        
        
        <copy todir="${dist.temp}/build">
            <fileset dir="${build}">
                <include name="*.jar" />
            </fileset>
        </copy>
        
        <copy todir="${dist.temp}/doc">
            <fileset dir="doc">
                <exclude name="dev" />
                <exclude name="dev/**/*" />
            </fileset>
        </copy>
        
        <copy todir="${dist.temp}/contrib">
            <fileset dir="contrib"/>
        </copy>
        
        <copy todir="${dist.temp}" file="README" />
        <copy todir="${dist.temp}" file="LICENSE" />
        <copy todir="${dist.temp}" file="CHANGES" />
        
        <!-- Compile templates for distribution -->
        <subant>
            <property name="pulpcore.path" location="${build}" />
            <property name="library.path" location="${library.path}"/>
            <property name="proguard.path" location="${proguard.path}"/>
            <property name="scala.home" location="${scala.home}"/>
            <property name="retroweaver.jar.file" location="${build}/retroweaver-all.jar" />
            <property name="do.combinedjar" value="true" /> <!-- For Scala -->
            <property name="do.obfuscate" value="true" />
            <property name="include.src" value="false" />
            <fileset dir="${dist.temp}/templates" includes="*/build.xml"/>
            <target name="build"/>
            <target name="-clean-temp"/>
        </subant>

        <!-- Zip up the source for IDEs -->
        <zip destfile="${dist.temp}/src.zip">
            <zipfileset dir="${src}" prefix="src" includes="**/*.java"/>
        </zip>
        
        <zip destfile="${build}/pulpcore-${version.full}.zip">
            <zipfileset dir="${dist.temp}" prefix="pulpcore-${version.full}" />
        </zip>
        
        <delete dir="${dist.temp}" failonerror="false" />
    </target>
    
    
    <!-- Use this task to keep the example build files up to date -->
    <target name="update-example-build-files" 
        description="Updates the example build files from the 'quick' template">
        <subant target="-copy-quick-template" genericantfile="build.xml">
            <property name="template.dir" location="templates/quick" />
            <dirset dir="examples" includes="*" excludes="*Scala*"/>
        </subant>
        <subant target="-copy-scala-template" genericantfile="build.xml">
            <property name="template.dir" location="templates/scala" />
            <dirset dir="examples" includes="*Scala*"/>
        </subant>
        
        <!-- Special cases (hacks) for BubbleMark -->
        <replace file="examples/BubbleMark/build.xml">
            <replacefilter token="640" value="500" />
            <replacefilter token="480" value="300" />
        </replace>
        <replace file="examples/BubbleMark/build.xml">
            <replacetoken><![CDATA[<keep name="${project.scene}" />]]></replacetoken>
            <replacevalue><![CDATA[
            <!-- Special case for BubbleMark: keep these methods available for JavaScript -->
            <keep name="${project.scene}">
                <method access="public" />
            </keep>
            <keep name="pulpcore.Scene2D">
                <method name="setDirtyRectanglesEnabled" />
            </keep>]]></replacevalue>
        </replace>
        <replace file="examples/BubbleMark/build.xml">
            <replacetoken><![CDATA[<property name="applet.template" value="" />]]></replacetoken>
            <replacevalue><![CDATA[<property name="applet.template" value="template.html" />]]></replacevalue>
        </replace>
    </target>
    
    <!-- Called from update-example-build-files -->
    <target name="-copy-quick-template">
        <path id="example.path" path="${basedir}"/>
        <pathconvert property="example.name" refid="example.path">
            <flattenmapper/>
        </pathconvert>
        
        <copy file="${template.dir}/build.xml" overwrite="true" tofile="build.xml" />
        <replace file="build.xml" token="HelloWorld" value="${example.name}" />

        <available file="src" property="src.present" />
        <antcall target="-new-quick-template" />
    </target>
    
    <!-- Called from -copy-quick-template -->
    <target name="-new-quick-template" unless="src.present">
        <echo>Creating new example: ${example.name}</echo>
        <mkdir dir="src" />
        <mkdir dir="res" />
        <mkdir dir="lib" />
        <copy file="${template.dir}/src/HelloWorld.java" overwrite="true" 
            tofile="src/${example.name}.java" />
        <replace file="src/${example.name}.java" token="HelloWorld" value="${example.name}" />
        
        <copy todir="src">
            <fileset dir="${template.dir}/src" excludes="HelloWorld.java" />
        </copy>
        <copy todir="res">
            <fileset dir="${template.dir}/res"/>
        </copy>
    </target>

    <!-- Called from update-example-build-files -->
    <target name="-copy-scala-template">
        <path id="example.path" path="${basedir}"/>
        <pathconvert property="example.name" refid="example.path">
            <flattenmapper/>
        </pathconvert>

        <copy file="${template.dir}/build.xml" overwrite="true" tofile="build.xml" />
        <replace file="build.xml" token="HelloWorld" value="${example.name}" />

        <copy file="${template.dir}/src/PulpCore.scala" overwrite="true"
            tofile="src/PulpCore.scala" />

        <available file="src" property="src.present" />
        <antcall target="-new-scala-template" />
    </target>

    <!-- Called from -copy-scala-template -->
    <target name="-new-scala-template" unless="src.present">
        <echo>Creating new example: ${example.name}</echo>
        <mkdir dir="src" />
        <mkdir dir="res" />
        <mkdir dir="lib" />
        <copy file="${template.dir}/src/HelloWorld.scala" overwrite="true"
            tofile="src/${example.name}.scala" />
        <replace file="src/${example.name}.scala" token="HelloWorld" value="${example.name}" />

        <copy todir="src">
            <fileset dir="${template.dir}/src" excludes="HelloWorld.scala" />
        </copy>
        <copy todir="res">
            <fileset dir="${template.dir}/res"/>
        </copy>
    </target>
    
    <target name="build-examples" description="Compile all examples and templates (for testing)">
        <subant>
            <property name="retroweaver.jar.file" location="${build}/retroweaver-all.jar" />
            <property name="include.src" value="true" />
            <fileset dir="examples" includes="*/build.xml"/>
            <fileset dir="templates" includes="*/build.xml"/>
            <target name="build"/>
        </subant>
    </target>
    
    <target name="clean-examples" description="Removes all built examples">
        <subant>
            <fileset dir="examples" includes="*/build.xml"/>
            <fileset dir="templates" includes="*/build.xml"/>
            <target name="clean"/>
        </subant>
    </target>

</project>

